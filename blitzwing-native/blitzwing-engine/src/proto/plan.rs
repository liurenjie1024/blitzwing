// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `plan.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct AggregationNode {
    // message fields
    field_final: ::std::option::Option<bool>,
    groups: ::protobuf::RepeatedField<super::expr::ExprNode>,
    aggregations: ::protobuf::RepeatedField<super::expr::ExprNode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AggregationNode {
    fn default() -> &'a AggregationNode {
        <AggregationNode as ::protobuf::Message>::default_instance()
    }
}

impl AggregationNode {
    pub fn new() -> AggregationNode {
        ::std::default::Default::default()
    }

    // required bool final = 1;


    pub fn get_field_final(&self) -> bool {
        self.field_final.unwrap_or(false)
    }
    pub fn clear_field_final(&mut self) {
        self.field_final = ::std::option::Option::None;
    }

    pub fn has_field_final(&self) -> bool {
        self.field_final.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_final(&mut self, v: bool) {
        self.field_final = ::std::option::Option::Some(v);
    }

    // repeated .ExprNode groups = 2;


    pub fn get_groups(&self) -> &[super::expr::ExprNode] {
        &self.groups
    }
    pub fn clear_groups(&mut self) {
        self.groups.clear();
    }

    // Param is passed by value, moved
    pub fn set_groups(&mut self, v: ::protobuf::RepeatedField<super::expr::ExprNode>) {
        self.groups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_groups(&mut self) -> &mut ::protobuf::RepeatedField<super::expr::ExprNode> {
        &mut self.groups
    }

    // Take field
    pub fn take_groups(&mut self) -> ::protobuf::RepeatedField<super::expr::ExprNode> {
        ::std::mem::replace(&mut self.groups, ::protobuf::RepeatedField::new())
    }

    // repeated .ExprNode aggregations = 3;


    pub fn get_aggregations(&self) -> &[super::expr::ExprNode] {
        &self.aggregations
    }
    pub fn clear_aggregations(&mut self) {
        self.aggregations.clear();
    }

    // Param is passed by value, moved
    pub fn set_aggregations(&mut self, v: ::protobuf::RepeatedField<super::expr::ExprNode>) {
        self.aggregations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aggregations(&mut self) -> &mut ::protobuf::RepeatedField<super::expr::ExprNode> {
        &mut self.aggregations
    }

    // Take field
    pub fn take_aggregations(&mut self) -> ::protobuf::RepeatedField<super::expr::ExprNode> {
        ::std::mem::replace(&mut self.aggregations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AggregationNode {
    fn is_initialized(&self) -> bool {
        if self.field_final.is_none() {
            return false;
        }
        for v in &self.groups {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.aggregations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.field_final = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.groups)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.aggregations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_final {
            my_size += 2;
        }
        for value in &self.groups {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.aggregations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_final {
            os.write_bool(1, v)?;
        }
        for v in &self.groups {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.aggregations {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AggregationNode {
        AggregationNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "final",
                    |m: &AggregationNode| { &m.field_final },
                    |m: &mut AggregationNode| { &mut m.field_final },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::expr::ExprNode>>(
                    "groups",
                    |m: &AggregationNode| { &m.groups },
                    |m: &mut AggregationNode| { &mut m.groups },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::expr::ExprNode>>(
                    "aggregations",
                    |m: &AggregationNode| { &m.aggregations },
                    |m: &mut AggregationNode| { &mut m.aggregations },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AggregationNode>(
                    "AggregationNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AggregationNode {
        static mut instance: ::protobuf::lazy::Lazy<AggregationNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AggregationNode,
        };
        unsafe {
            instance.get(AggregationNode::new)
        }
    }
}

impl ::protobuf::Clear for AggregationNode {
    fn clear(&mut self) {
        self.field_final = ::std::option::Option::None;
        self.groups.clear();
        self.aggregations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AggregationNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AggregationNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ParquetFileScanNode {
    // message fields
    path: ::protobuf::SingularField<::std::string::String>,
    schema: ::protobuf::SingularPtrField<super::types::Schema>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ParquetFileScanNode {
    fn default() -> &'a ParquetFileScanNode {
        <ParquetFileScanNode as ::protobuf::Message>::default_instance()
    }
}

impl ParquetFileScanNode {
    pub fn new() -> ParquetFileScanNode {
        ::std::default::Default::default()
    }

    // required string path = 1;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .Schema schema = 2;


    pub fn get_schema(&self) -> &super::types::Schema {
        self.schema.as_ref().unwrap_or_else(|| super::types::Schema::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: super::types::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut super::types::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> super::types::Schema {
        self.schema.take().unwrap_or_else(|| super::types::Schema::new())
    }
}

impl ::protobuf::Message for ParquetFileScanNode {
    fn is_initialized(&self) -> bool {
        if self.path.is_none() {
            return false;
        }
        if self.schema.is_none() {
            return false;
        }
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ParquetFileScanNode {
        ParquetFileScanNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &ParquetFileScanNode| { &m.path },
                    |m: &mut ParquetFileScanNode| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Schema>>(
                    "schema",
                    |m: &ParquetFileScanNode| { &m.schema },
                    |m: &mut ParquetFileScanNode| { &mut m.schema },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ParquetFileScanNode>(
                    "ParquetFileScanNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ParquetFileScanNode {
        static mut instance: ::protobuf::lazy::Lazy<ParquetFileScanNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ParquetFileScanNode,
        };
        unsafe {
            instance.get(ParquetFileScanNode::new)
        }
    }
}

impl ::protobuf::Clear for ParquetFileScanNode {
    fn clear(&mut self) {
        self.path.clear();
        self.schema.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ParquetFileScanNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParquetFileScanNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JniInputNode {
    // message fields
    schema: ::protobuf::SingularPtrField<super::types::Schema>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JniInputNode {
    fn default() -> &'a JniInputNode {
        <JniInputNode as ::protobuf::Message>::default_instance()
    }
}

impl JniInputNode {
    pub fn new() -> JniInputNode {
        ::std::default::Default::default()
    }

    // required .Schema schema = 1;


    pub fn get_schema(&self) -> &super::types::Schema {
        self.schema.as_ref().unwrap_or_else(|| super::types::Schema::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: super::types::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut super::types::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> super::types::Schema {
        self.schema.take().unwrap_or_else(|| super::types::Schema::new())
    }
}

impl ::protobuf::Message for JniInputNode {
    fn is_initialized(&self) -> bool {
        if self.schema.is_none() {
            return false;
        }
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JniInputNode {
        JniInputNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Schema>>(
                    "schema",
                    |m: &JniInputNode| { &m.schema },
                    |m: &mut JniInputNode| { &mut m.schema },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JniInputNode>(
                    "JniInputNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JniInputNode {
        static mut instance: ::protobuf::lazy::Lazy<JniInputNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JniInputNode,
        };
        unsafe {
            instance.get(JniInputNode::new)
        }
    }
}

impl ::protobuf::Clear for JniInputNode {
    fn clear(&mut self) {
        self.schema.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JniInputNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JniInputNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlanNode {
    // message fields
    node_type: ::std::option::Option<NodeType>,
    agg_node: ::protobuf::SingularPtrField<AggregationNode>,
    jni_input_node: ::protobuf::SingularPtrField<JniInputNode>,
    parquet_file_scan_node: ::protobuf::SingularPtrField<ParquetFileScanNode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlanNode {
    fn default() -> &'a PlanNode {
        <PlanNode as ::protobuf::Message>::default_instance()
    }
}

impl PlanNode {
    pub fn new() -> PlanNode {
        ::std::default::Default::default()
    }

    // required .NodeType node_type = 1;


    pub fn get_node_type(&self) -> NodeType {
        self.node_type.unwrap_or(NodeType::AGG_NODE)
    }
    pub fn clear_node_type(&mut self) {
        self.node_type = ::std::option::Option::None;
    }

    pub fn has_node_type(&self) -> bool {
        self.node_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node_type(&mut self, v: NodeType) {
        self.node_type = ::std::option::Option::Some(v);
    }

    // optional .AggregationNode agg_node = 10;


    pub fn get_agg_node(&self) -> &AggregationNode {
        self.agg_node.as_ref().unwrap_or_else(|| AggregationNode::default_instance())
    }
    pub fn clear_agg_node(&mut self) {
        self.agg_node.clear();
    }

    pub fn has_agg_node(&self) -> bool {
        self.agg_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agg_node(&mut self, v: AggregationNode) {
        self.agg_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agg_node(&mut self) -> &mut AggregationNode {
        if self.agg_node.is_none() {
            self.agg_node.set_default();
        }
        self.agg_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_agg_node(&mut self) -> AggregationNode {
        self.agg_node.take().unwrap_or_else(|| AggregationNode::new())
    }

    // optional .JniInputNode jni_input_node = 11;


    pub fn get_jni_input_node(&self) -> &JniInputNode {
        self.jni_input_node.as_ref().unwrap_or_else(|| JniInputNode::default_instance())
    }
    pub fn clear_jni_input_node(&mut self) {
        self.jni_input_node.clear();
    }

    pub fn has_jni_input_node(&self) -> bool {
        self.jni_input_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jni_input_node(&mut self, v: JniInputNode) {
        self.jni_input_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_jni_input_node(&mut self) -> &mut JniInputNode {
        if self.jni_input_node.is_none() {
            self.jni_input_node.set_default();
        }
        self.jni_input_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_jni_input_node(&mut self) -> JniInputNode {
        self.jni_input_node.take().unwrap_or_else(|| JniInputNode::new())
    }

    // optional .ParquetFileScanNode parquet_file_scan_node = 12;


    pub fn get_parquet_file_scan_node(&self) -> &ParquetFileScanNode {
        self.parquet_file_scan_node.as_ref().unwrap_or_else(|| ParquetFileScanNode::default_instance())
    }
    pub fn clear_parquet_file_scan_node(&mut self) {
        self.parquet_file_scan_node.clear();
    }

    pub fn has_parquet_file_scan_node(&self) -> bool {
        self.parquet_file_scan_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parquet_file_scan_node(&mut self, v: ParquetFileScanNode) {
        self.parquet_file_scan_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parquet_file_scan_node(&mut self) -> &mut ParquetFileScanNode {
        if self.parquet_file_scan_node.is_none() {
            self.parquet_file_scan_node.set_default();
        }
        self.parquet_file_scan_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_parquet_file_scan_node(&mut self) -> ParquetFileScanNode {
        self.parquet_file_scan_node.take().unwrap_or_else(|| ParquetFileScanNode::new())
    }
}

impl ::protobuf::Message for PlanNode {
    fn is_initialized(&self) -> bool {
        if self.node_type.is_none() {
            return false;
        }
        for v in &self.agg_node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.jni_input_node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.parquet_file_scan_node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.node_type, 1, &mut self.unknown_fields)?
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.agg_node)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.jni_input_node)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.parquet_file_scan_node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.node_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.agg_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.jni_input_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.parquet_file_scan_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.node_type {
            os.write_enum(1, v.value())?;
        }
        if let Some(ref v) = self.agg_node.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.jni_input_node.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.parquet_file_scan_node.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlanNode {
        PlanNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NodeType>>(
                    "node_type",
                    |m: &PlanNode| { &m.node_type },
                    |m: &mut PlanNode| { &mut m.node_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AggregationNode>>(
                    "agg_node",
                    |m: &PlanNode| { &m.agg_node },
                    |m: &mut PlanNode| { &mut m.agg_node },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<JniInputNode>>(
                    "jni_input_node",
                    |m: &PlanNode| { &m.jni_input_node },
                    |m: &mut PlanNode| { &mut m.jni_input_node },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ParquetFileScanNode>>(
                    "parquet_file_scan_node",
                    |m: &PlanNode| { &m.parquet_file_scan_node },
                    |m: &mut PlanNode| { &mut m.parquet_file_scan_node },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PlanNode>(
                    "PlanNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PlanNode {
        static mut instance: ::protobuf::lazy::Lazy<PlanNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PlanNode,
        };
        unsafe {
            instance.get(PlanNode::new)
        }
    }
}

impl ::protobuf::Clear for PlanNode {
    fn clear(&mut self) {
        self.node_type = ::std::option::Option::None;
        self.agg_node.clear();
        self.jni_input_node.clear();
        self.parquet_file_scan_node.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlanNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlanNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Plan {
    // message fields
    plan_nodes: ::protobuf::RepeatedField<PlanNode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Plan {
    fn default() -> &'a Plan {
        <Plan as ::protobuf::Message>::default_instance()
    }
}

impl Plan {
    pub fn new() -> Plan {
        ::std::default::Default::default()
    }

    // repeated .PlanNode plan_nodes = 1;


    pub fn get_plan_nodes(&self) -> &[PlanNode] {
        &self.plan_nodes
    }
    pub fn clear_plan_nodes(&mut self) {
        self.plan_nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_plan_nodes(&mut self, v: ::protobuf::RepeatedField<PlanNode>) {
        self.plan_nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_plan_nodes(&mut self) -> &mut ::protobuf::RepeatedField<PlanNode> {
        &mut self.plan_nodes
    }

    // Take field
    pub fn take_plan_nodes(&mut self) -> ::protobuf::RepeatedField<PlanNode> {
        ::std::mem::replace(&mut self.plan_nodes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Plan {
    fn is_initialized(&self) -> bool {
        for v in &self.plan_nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.plan_nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.plan_nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.plan_nodes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Plan {
        Plan::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlanNode>>(
                    "plan_nodes",
                    |m: &Plan| { &m.plan_nodes },
                    |m: &mut Plan| { &mut m.plan_nodes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Plan>(
                    "Plan",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Plan {
        static mut instance: ::protobuf::lazy::Lazy<Plan> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Plan,
        };
        unsafe {
            instance.get(Plan::new)
        }
    }
}

impl ::protobuf::Clear for Plan {
    fn clear(&mut self) {
        self.plan_nodes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Plan {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Plan {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NodeType {
    AGG_NODE = 1,
    JNI_INPUT_NODE = 2,
    PARQUET_FILE_SCAN_NODE = 3,
}

impl ::protobuf::ProtobufEnum for NodeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NodeType> {
        match value {
            1 => ::std::option::Option::Some(NodeType::AGG_NODE),
            2 => ::std::option::Option::Some(NodeType::JNI_INPUT_NODE),
            3 => ::std::option::Option::Some(NodeType::PARQUET_FILE_SCAN_NODE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NodeType] = &[
            NodeType::AGG_NODE,
            NodeType::JNI_INPUT_NODE,
            NodeType::PARQUET_FILE_SCAN_NODE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("NodeType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for NodeType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for NodeType {
    fn default() -> Self {
        NodeType::AGG_NODE
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nplan.proto\x1a\nexpr.proto\x1a\x0btypes.proto\"y\n\x0fAggregationNod\
    e\x12\x14\n\x05final\x18\x01\x20\x02(\x08R\x05final\x12!\n\x06groups\x18\
    \x02\x20\x03(\x0b2\t.ExprNodeR\x06groups\x12-\n\x0caggregations\x18\x03\
    \x20\x03(\x0b2\t.ExprNodeR\x0caggregations\"J\n\x13ParquetFileScanNode\
    \x12\x12\n\x04path\x18\x01\x20\x02(\tR\x04path\x12\x1f\n\x06schema\x18\
    \x02\x20\x02(\x0b2\x07.SchemaR\x06schema\"/\n\x0cJniInputNode\x12\x1f\n\
    \x06schema\x18\x01\x20\x02(\x0b2\x07.SchemaR\x06schema\"\xdf\x01\n\x08Pl\
    anNode\x12&\n\tnode_type\x18\x01\x20\x02(\x0e2\t.NodeTypeR\x08nodeType\
    \x12+\n\x08agg_node\x18\n\x20\x01(\x0b2\x10.AggregationNodeR\x07aggNode\
    \x123\n\x0ejni_input_node\x18\x0b\x20\x01(\x0b2\r.JniInputNodeR\x0cjniIn\
    putNode\x12I\n\x16parquet_file_scan_node\x18\x0c\x20\x01(\x0b2\x14.Parqu\
    etFileScanNodeR\x13parquetFileScanNode\"0\n\x04Plan\x12(\n\nplan_nodes\
    \x18\x01\x20\x03(\x0b2\t.PlanNodeR\tplanNodes*H\n\x08NodeType\x12\x0c\n\
    \x08AGG_NODE\x10\x01\x12\x12\n\x0eJNI_INPUT_NODE\x10\x02\x12\x1a\n\x16PA\
    RQUET_FILE_SCAN_NODE\x10\x03B0\n#com.ebay.hadoop.arrow.executor.planB\tA\
    rrowPlanJ\xd4\x08\n\x06\x12\x04\0\0'\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x08\x12\x03\x02\0:\n\t\n\x02\x08\x01\x12\x03\x02\0:\n\x08\n\
    \x01\x08\x12\x03\x03\0*\n\t\n\x02\x08\x08\x12\x03\x03\0*\n\t\n\x02\x03\0\
    \x12\x03\x05\0\x14\n\t\n\x02\x03\x01\x12\x03\x06\0\x15\n\n\n\x02\x05\0\
    \x12\x04\x08\0\x0c\x01\n\n\n\x03\x05\0\x01\x12\x03\x08\x05\r\n\x0b\n\x04\
    \x05\0\x02\0\x12\x03\t\x04\x11\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\t\x04\
    \x0c\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\t\x0f\x10\n\x0b\n\x04\x05\0\x02\
    \x01\x12\x03\n\x04\x17\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\n\x04\x12\n\
    \x0c\n\x05\x05\0\x02\x01\x02\x12\x03\n\x15\x16\n\x0b\n\x04\x05\0\x02\x02\
    \x12\x03\x0b\x04\x1f\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0b\x04\x1a\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x0b\x1d\x1e\n\n\n\x02\x04\0\x12\x04\
    \x0e\0\x12\x01\n\n\n\x03\x04\0\x01\x12\x03\x0e\x08\x17\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x0f\x04\x1c\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0f\x04\
    \x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0f\r\x11\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x0f\x12\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x1a\
    \x1b\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x10\x04!\n\x0c\n\x05\x04\0\x02\
    \x01\x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x10\r\
    \x15\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\x16\x1c\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x10\x1f\x20\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x11\
    \x04'\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x11\x04\x0c\n\x0c\n\x05\x04\
    \0\x02\x02\x06\x12\x03\x11\r\x15\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x11\x16\"\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x11%&\n\n\n\x02\x04\x01\
    \x12\x04\x14\0\x17\x01\n\n\n\x03\x04\x01\x01\x12\x03\x14\x08\x1b\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x15\x04\x1d\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x15\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x15\r\x13\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x15\x14\x18\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x15\x1b\x1c\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x16\x04\x1f\n\
    \x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x16\x04\x0c\n\x0c\n\x05\x04\x01\
    \x02\x01\x06\x12\x03\x16\r\x13\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x16\x14\x1a\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x16\x1d\x1e\n\n\n\
    \x02\x04\x02\x12\x04\x19\0\x1b\x01\n\n\n\x03\x04\x02\x01\x12\x03\x19\x08\
    \x14\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1a\x04\x1f\n\x0c\n\x05\x04\x02\
    \x02\0\x04\x12\x03\x1a\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1a\
    \r\x13\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1a\x14\x1a\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x1a\x1d\x1e\n\n\n\x02\x04\x03\x12\x04\x1d\0#\x01\
    \n\n\n\x03\x04\x03\x01\x12\x03\x1d\x08\x10\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03\x1e\x04$\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x1e\x04\x0c\n\x0c\n\
    \x05\x04\x03\x02\0\x06\x12\x03\x1e\r\x15\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x1e\x16\x1f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1e\"#\n\x0b\
    \n\x04\x04\x03\x02\x01\x12\x03\x20\x04+\n\x0c\n\x05\x04\x03\x02\x01\x04\
    \x12\x03\x20\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\x20\r\x1c\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x20\x1d%\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03\x20(*\n\x0b\n\x04\x04\x03\x02\x02\x12\x03!\x04.\n\x0c\n\
    \x05\x04\x03\x02\x02\x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x03\x02\x02\
    \x06\x12\x03!\r\x19\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03!\x1a(\n\x0c\
    \n\x05\x04\x03\x02\x02\x03\x12\x03!+-\n\x0b\n\x04\x04\x03\x02\x03\x12\
    \x03\"\x04=\n\x0c\n\x05\x04\x03\x02\x03\x04\x12\x03\"\x04\x0c\n\x0c\n\
    \x05\x04\x03\x02\x03\x06\x12\x03\"\r\x20\n\x0c\n\x05\x04\x03\x02\x03\x01\
    \x12\x03\"!7\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\":<\n\n\n\x02\x04\
    \x04\x12\x04%\0'\x01\n\n\n\x03\x04\x04\x01\x12\x03%\x08\x0c\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03&\x04%\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03&\x04\
    \x0c\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03&\r\x15\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03&\x16\x20\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03&#$\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
