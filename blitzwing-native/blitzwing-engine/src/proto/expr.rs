// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `expr.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct AggExprNode {
    // message fields
    operation: ::std::option::Option<AggregateOpration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AggExprNode {
    fn default() -> &'a AggExprNode {
        <AggExprNode as ::protobuf::Message>::default_instance()
    }
}

impl AggExprNode {
    pub fn new() -> AggExprNode {
        ::std::default::Default::default()
    }

    // required .AggregateOpration operation = 1;


    pub fn get_operation(&self) -> AggregateOpration {
        self.operation.unwrap_or(AggregateOpration::SUM)
    }
    pub fn clear_operation(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_operation(&self) -> bool {
        self.operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: AggregateOpration) {
        self.operation = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for AggExprNode {
    fn is_initialized(&self) -> bool {
        if self.operation.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.operation, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.operation {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.operation {
            os.write_enum(1, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AggExprNode {
        AggExprNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AggregateOpration>>(
                    "operation",
                    |m: &AggExprNode| { &m.operation },
                    |m: &mut AggExprNode| { &mut m.operation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AggExprNode>(
                    "AggExprNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AggExprNode {
        static mut instance: ::protobuf::lazy::Lazy<AggExprNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AggExprNode,
        };
        unsafe {
            instance.get(AggExprNode::new)
        }
    }
}

impl ::protobuf::Clear for AggExprNode {
    fn clear(&mut self) {
        self.operation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AggExprNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AggExprNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiteralNode {
    // message fields
    field_type: ::std::option::Option<super::types::BasicType>,
    bool_value: ::std::option::Option<bool>,
    int32_value: ::std::option::Option<i32>,
    int64_value: ::std::option::Option<i64>,
    float_value: ::std::option::Option<f32>,
    double_value: ::std::option::Option<f64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiteralNode {
    fn default() -> &'a LiteralNode {
        <LiteralNode as ::protobuf::Message>::default_instance()
    }
}

impl LiteralNode {
    pub fn new() -> LiteralNode {
        ::std::default::Default::default()
    }

    // required .BasicType type = 1;


    pub fn get_field_type(&self) -> super::types::BasicType {
        self.field_type.unwrap_or(super::types::BasicType::NONE)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: super::types::BasicType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional bool bool_value = 11;


    pub fn get_bool_value(&self) -> bool {
        self.bool_value.unwrap_or(false)
    }
    pub fn clear_bool_value(&mut self) {
        self.bool_value = ::std::option::Option::None;
    }

    pub fn has_bool_value(&self) -> bool {
        self.bool_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bool_value(&mut self, v: bool) {
        self.bool_value = ::std::option::Option::Some(v);
    }

    // optional int32 int32_value = 12;


    pub fn get_int32_value(&self) -> i32 {
        self.int32_value.unwrap_or(0)
    }
    pub fn clear_int32_value(&mut self) {
        self.int32_value = ::std::option::Option::None;
    }

    pub fn has_int32_value(&self) -> bool {
        self.int32_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_int32_value(&mut self, v: i32) {
        self.int32_value = ::std::option::Option::Some(v);
    }

    // optional int64 int64_value = 13;


    pub fn get_int64_value(&self) -> i64 {
        self.int64_value.unwrap_or(0)
    }
    pub fn clear_int64_value(&mut self) {
        self.int64_value = ::std::option::Option::None;
    }

    pub fn has_int64_value(&self) -> bool {
        self.int64_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_int64_value(&mut self, v: i64) {
        self.int64_value = ::std::option::Option::Some(v);
    }

    // optional float float_value = 14;


    pub fn get_float_value(&self) -> f32 {
        self.float_value.unwrap_or(0.)
    }
    pub fn clear_float_value(&mut self) {
        self.float_value = ::std::option::Option::None;
    }

    pub fn has_float_value(&self) -> bool {
        self.float_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_float_value(&mut self, v: f32) {
        self.float_value = ::std::option::Option::Some(v);
    }

    // optional double double_value = 15;


    pub fn get_double_value(&self) -> f64 {
        self.double_value.unwrap_or(0.)
    }
    pub fn clear_double_value(&mut self) {
        self.double_value = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        self.double_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.double_value = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for LiteralNode {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.bool_value = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.int32_value = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int64_value = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.float_value = ::std::option::Option::Some(tmp);
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.double_value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.bool_value {
            my_size += 2;
        }
        if let Some(v) = self.int32_value {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.int64_value {
            my_size += ::protobuf::rt::value_size(13, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.float_value {
            my_size += 5;
        }
        if let Some(v) = self.double_value {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, v.value())?;
        }
        if let Some(v) = self.bool_value {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.int32_value {
            os.write_int32(12, v)?;
        }
        if let Some(v) = self.int64_value {
            os.write_int64(13, v)?;
        }
        if let Some(v) = self.float_value {
            os.write_float(14, v)?;
        }
        if let Some(v) = self.double_value {
            os.write_double(15, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiteralNode {
        LiteralNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::types::BasicType>>(
                    "type",
                    |m: &LiteralNode| { &m.field_type },
                    |m: &mut LiteralNode| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "bool_value",
                    |m: &LiteralNode| { &m.bool_value },
                    |m: &mut LiteralNode| { &mut m.bool_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "int32_value",
                    |m: &LiteralNode| { &m.int32_value },
                    |m: &mut LiteralNode| { &mut m.int32_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int64_value",
                    |m: &LiteralNode| { &m.int64_value },
                    |m: &mut LiteralNode| { &mut m.int64_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "float_value",
                    |m: &LiteralNode| { &m.float_value },
                    |m: &mut LiteralNode| { &mut m.float_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "double_value",
                    |m: &LiteralNode| { &m.double_value },
                    |m: &mut LiteralNode| { &mut m.double_value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LiteralNode>(
                    "LiteralNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LiteralNode {
        static mut instance: ::protobuf::lazy::Lazy<LiteralNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LiteralNode,
        };
        unsafe {
            instance.get(LiteralNode::new)
        }
    }
}

impl ::protobuf::Clear for LiteralNode {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.bool_value = ::std::option::Option::None;
        self.int32_value = ::std::option::Option::None;
        self.int64_value = ::std::option::Option::None;
        self.float_value = ::std::option::Option::None;
        self.double_value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiteralNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiteralNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Field {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    field_type: ::protobuf::SingularPtrField<super::types::ExprType>,
    nullable: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Field {
    fn default() -> &'a Field {
        <Field as ::protobuf::Message>::default_instance()
    }
}

impl Field {
    pub fn new() -> Field {
        ::std::default::Default::default()
    }

    // optional string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .ExprType type = 2;


    pub fn get_field_type(&self) -> &super::types::ExprType {
        self.field_type.as_ref().unwrap_or_else(|| super::types::ExprType::default_instance())
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: super::types::ExprType) {
        self.field_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut super::types::ExprType {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> super::types::ExprType {
        self.field_type.take().unwrap_or_else(|| super::types::ExprType::new())
    }

    // optional bool nullable = 3;


    pub fn get_nullable(&self) -> bool {
        self.nullable.unwrap_or(false)
    }
    pub fn clear_nullable(&mut self) {
        self.nullable = ::std::option::Option::None;
    }

    pub fn has_nullable(&self) -> bool {
        self.nullable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nullable(&mut self, v: bool) {
        self.nullable = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Field {
    fn is_initialized(&self) -> bool {
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.nullable = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.field_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.nullable {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.nullable {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Field {
        Field::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Field| { &m.name },
                    |m: &mut Field| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::ExprType>>(
                    "type",
                    |m: &Field| { &m.field_type },
                    |m: &mut Field| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "nullable",
                    |m: &Field| { &m.nullable },
                    |m: &mut Field| { &mut m.nullable },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Field>(
                    "Field",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Field {
        static mut instance: ::protobuf::lazy::Lazy<Field> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Field,
        };
        unsafe {
            instance.get(Field::new)
        }
    }
}

impl ::protobuf::Clear for Field {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type.clear();
        self.nullable = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Field {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FieldNode {
    // message fields
    field: ::protobuf::SingularPtrField<Field>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldNode {
    fn default() -> &'a FieldNode {
        <FieldNode as ::protobuf::Message>::default_instance()
    }
}

impl FieldNode {
    pub fn new() -> FieldNode {
        ::std::default::Default::default()
    }

    // optional .Field field = 1;


    pub fn get_field(&self) -> &Field {
        self.field.as_ref().unwrap_or_else(|| Field::default_instance())
    }
    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    pub fn has_field(&self) -> bool {
        self.field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: Field) {
        self.field = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut Field {
        if self.field.is_none() {
            self.field.set_default();
        }
        self.field.as_mut().unwrap()
    }

    // Take field
    pub fn take_field(&mut self) -> Field {
        self.field.take().unwrap_or_else(|| Field::new())
    }
}

impl ::protobuf::Message for FieldNode {
    fn is_initialized(&self) -> bool {
        for v in &self.field {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldNode {
        FieldNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Field>>(
                    "field",
                    |m: &FieldNode| { &m.field },
                    |m: &mut FieldNode| { &mut m.field },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FieldNode>(
                    "FieldNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FieldNode {
        static mut instance: ::protobuf::lazy::Lazy<FieldNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FieldNode,
        };
        unsafe {
            instance.get(FieldNode::new)
        }
    }
}

impl ::protobuf::Clear for FieldNode {
    fn clear(&mut self) {
        self.field.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExprNode {
    // message fields
    children: ::protobuf::RepeatedField<ExprNode>,
    expr_type: ::protobuf::SingularPtrField<super::types::ExprType>,
    agg_node: ::protobuf::SingularPtrField<AggExprNode>,
    literal_node: ::protobuf::SingularPtrField<LiteralNode>,
    field_node: ::protobuf::SingularPtrField<FieldNode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExprNode {
    fn default() -> &'a ExprNode {
        <ExprNode as ::protobuf::Message>::default_instance()
    }
}

impl ExprNode {
    pub fn new() -> ExprNode {
        ::std::default::Default::default()
    }

    // repeated .ExprNode children = 1;


    pub fn get_children(&self) -> &[ExprNode] {
        &self.children
    }
    pub fn clear_children(&mut self) {
        self.children.clear();
    }

    // Param is passed by value, moved
    pub fn set_children(&mut self, v: ::protobuf::RepeatedField<ExprNode>) {
        self.children = v;
    }

    // Mutable pointer to the field.
    pub fn mut_children(&mut self) -> &mut ::protobuf::RepeatedField<ExprNode> {
        &mut self.children
    }

    // Take field
    pub fn take_children(&mut self) -> ::protobuf::RepeatedField<ExprNode> {
        ::std::mem::replace(&mut self.children, ::protobuf::RepeatedField::new())
    }

    // required .ExprType expr_type = 2;


    pub fn get_expr_type(&self) -> &super::types::ExprType {
        self.expr_type.as_ref().unwrap_or_else(|| super::types::ExprType::default_instance())
    }
    pub fn clear_expr_type(&mut self) {
        self.expr_type.clear();
    }

    pub fn has_expr_type(&self) -> bool {
        self.expr_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expr_type(&mut self, v: super::types::ExprType) {
        self.expr_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expr_type(&mut self) -> &mut super::types::ExprType {
        if self.expr_type.is_none() {
            self.expr_type.set_default();
        }
        self.expr_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_expr_type(&mut self) -> super::types::ExprType {
        self.expr_type.take().unwrap_or_else(|| super::types::ExprType::new())
    }

    // optional .AggExprNode agg_node = 11;


    pub fn get_agg_node(&self) -> &AggExprNode {
        self.agg_node.as_ref().unwrap_or_else(|| AggExprNode::default_instance())
    }
    pub fn clear_agg_node(&mut self) {
        self.agg_node.clear();
    }

    pub fn has_agg_node(&self) -> bool {
        self.agg_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agg_node(&mut self, v: AggExprNode) {
        self.agg_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agg_node(&mut self) -> &mut AggExprNode {
        if self.agg_node.is_none() {
            self.agg_node.set_default();
        }
        self.agg_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_agg_node(&mut self) -> AggExprNode {
        self.agg_node.take().unwrap_or_else(|| AggExprNode::new())
    }

    // optional .LiteralNode literal_node = 12;


    pub fn get_literal_node(&self) -> &LiteralNode {
        self.literal_node.as_ref().unwrap_or_else(|| LiteralNode::default_instance())
    }
    pub fn clear_literal_node(&mut self) {
        self.literal_node.clear();
    }

    pub fn has_literal_node(&self) -> bool {
        self.literal_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_literal_node(&mut self, v: LiteralNode) {
        self.literal_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_literal_node(&mut self) -> &mut LiteralNode {
        if self.literal_node.is_none() {
            self.literal_node.set_default();
        }
        self.literal_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_literal_node(&mut self) -> LiteralNode {
        self.literal_node.take().unwrap_or_else(|| LiteralNode::new())
    }

    // optional .FieldNode field_node = 13;


    pub fn get_field_node(&self) -> &FieldNode {
        self.field_node.as_ref().unwrap_or_else(|| FieldNode::default_instance())
    }
    pub fn clear_field_node(&mut self) {
        self.field_node.clear();
    }

    pub fn has_field_node(&self) -> bool {
        self.field_node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_node(&mut self, v: FieldNode) {
        self.field_node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_node(&mut self) -> &mut FieldNode {
        if self.field_node.is_none() {
            self.field_node.set_default();
        }
        self.field_node.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_node(&mut self) -> FieldNode {
        self.field_node.take().unwrap_or_else(|| FieldNode::new())
    }
}

impl ::protobuf::Message for ExprNode {
    fn is_initialized(&self) -> bool {
        if self.expr_type.is_none() {
            return false;
        }
        for v in &self.children {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.expr_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.agg_node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.literal_node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.field_node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.children)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expr_type)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.agg_node)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.literal_node)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.children {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.expr_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.agg_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.literal_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.field_node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.children {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.expr_type.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.agg_node.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.literal_node.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.field_node.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExprNode {
        ExprNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExprNode>>(
                    "children",
                    |m: &ExprNode| { &m.children },
                    |m: &mut ExprNode| { &mut m.children },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::ExprType>>(
                    "expr_type",
                    |m: &ExprNode| { &m.expr_type },
                    |m: &mut ExprNode| { &mut m.expr_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AggExprNode>>(
                    "agg_node",
                    |m: &ExprNode| { &m.agg_node },
                    |m: &mut ExprNode| { &mut m.agg_node },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LiteralNode>>(
                    "literal_node",
                    |m: &ExprNode| { &m.literal_node },
                    |m: &mut ExprNode| { &mut m.literal_node },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FieldNode>>(
                    "field_node",
                    |m: &ExprNode| { &m.field_node },
                    |m: &mut ExprNode| { &mut m.field_node },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExprNode>(
                    "ExprNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExprNode {
        static mut instance: ::protobuf::lazy::Lazy<ExprNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExprNode,
        };
        unsafe {
            instance.get(ExprNode::new)
        }
    }
}

impl ::protobuf::Clear for ExprNode {
    fn clear(&mut self) {
        self.children.clear();
        self.expr_type.clear();
        self.agg_node.clear();
        self.literal_node.clear();
        self.field_node.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExprNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExprNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AggregateOpration {
    SUM = 1,
}

impl ::protobuf::ProtobufEnum for AggregateOpration {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AggregateOpration> {
        match value {
            1 => ::std::option::Option::Some(AggregateOpration::SUM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AggregateOpration] = &[
            AggregateOpration::SUM,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("AggregateOpration", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for AggregateOpration {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for AggregateOpration {
    fn default() -> Self {
        AggregateOpration::SUM
    }
}

impl ::protobuf::reflect::ProtobufValue for AggregateOpration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nexpr.proto\x1a\x0btypes.proto\"?\n\x0bAggExprNode\x120\n\toperation\
    \x18\x01\x20\x02(\x0e2\x12.AggregateOprationR\toperation\"\xd2\x01\n\x0b\
    LiteralNode\x12\x1e\n\x04type\x18\x01\x20\x02(\x0e2\n.BasicTypeR\x04type\
    \x12\x1d\n\nbool_value\x18\x0b\x20\x01(\x08R\tboolValue\x12\x1f\n\x0bint\
    32_value\x18\x0c\x20\x01(\x05R\nint32Value\x12\x1f\n\x0bint64_value\x18\
    \r\x20\x01(\x03R\nint64Value\x12\x1f\n\x0bfloat_value\x18\x0e\x20\x01(\
    \x02R\nfloatValue\x12!\n\x0cdouble_value\x18\x0f\x20\x01(\x01R\x0bdouble\
    Value\"V\n\x05Field\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    \x1d\n\x04type\x18\x02\x20\x01(\x0b2\t.ExprTypeR\x04type\x12\x1a\n\x08nu\
    llable\x18\x03\x20\x01(\x08R\x08nullable\")\n\tFieldNode\x12\x1c\n\x05fi\
    eld\x18\x01\x20\x01(\x0b2\x06.FieldR\x05field\"\xde\x01\n\x08ExprNode\
    \x12%\n\x08children\x18\x01\x20\x03(\x0b2\t.ExprNodeR\x08children\x12&\n\
    \texpr_type\x18\x02\x20\x02(\x0b2\t.ExprTypeR\x08exprType\x12'\n\x08agg_\
    node\x18\x0b\x20\x01(\x0b2\x0c.AggExprNodeR\x07aggNode\x12/\n\x0cliteral\
    _node\x18\x0c\x20\x01(\x0b2\x0c.LiteralNodeR\x0bliteralNode\x12)\n\nfiel\
    d_node\x18\r\x20\x01(\x0b2\n.FieldNodeR\tfieldNode*\x1c\n\x11AggregateOp\
    ration\x12\x07\n\x03SUM\x10\x01B<\n)com.ebay.hadoop.arrow.executor.plan.\
    exprsB\x0fArrowExpressionJ\xd0\n\n\x06\x12\x04\0\0)\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0\x15\n\x08\n\x01\x08\x12\
    \x03\x04\0B\n\t\n\x02\x08\x01\x12\x03\x04\0B\n\x08\n\x01\x08\x12\x03\x05\
    \00\n\t\n\x02\x08\x08\x12\x03\x05\00\n\n\n\x02\x05\0\x12\x04\x07\0\t\x01\
    \n\n\n\x03\x05\0\x01\x12\x03\x07\x05\x16\n\x0b\n\x04\x05\0\x02\0\x12\x03\
    \x08\x04\x0c\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x08\x04\x07\n\x0c\n\x05\
    \x05\0\x02\0\x02\x12\x03\x08\n\x0b\n\n\n\x02\x04\0\x12\x04\x0b\0\r\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x0b\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x0c\x04-\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0c\x04\x0c\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03\x0c\r\x1e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x0c\x1f(\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c+,\n\n\n\x02\x04\x01\
    \x12\x04\x0f\0\x17\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0f\x08\x13\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x10\x04\x20\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x10\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x10\r\x16\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x10\x17\x1b\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x10\x1e\x1f\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x12\x04#\n\x0c\
    \n\x05\x04\x01\x02\x01\x04\x12\x03\x12\x04\x0c\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x12\r\x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x12\
    \x13\x1d\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x12\x20\"\n\x0b\n\x04\
    \x04\x01\x02\x02\x12\x03\x13\x04$\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\
    \x03\x13\x04\x0c\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x13\r\x12\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03\x13\x13\x1e\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x13!#\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x14\x04$\n\
    \x0c\n\x05\x04\x01\x02\x03\x04\x12\x03\x14\x04\x0c\n\x0c\n\x05\x04\x01\
    \x02\x03\x05\x12\x03\x14\r\x12\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\
    \x14\x13\x1e\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x14!#\n\x0b\n\x04\
    \x04\x01\x02\x04\x12\x03\x15\x04$\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\
    \x03\x15\x04\x0c\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x15\r\x12\n\x0c\
    \n\x05\x04\x01\x02\x04\x01\x12\x03\x15\x13\x1e\n\x0c\n\x05\x04\x01\x02\
    \x04\x03\x12\x03\x15!#\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x16\x04&\n\
    \x0c\n\x05\x04\x01\x02\x05\x04\x12\x03\x16\x04\x0c\n\x0c\n\x05\x04\x01\
    \x02\x05\x05\x12\x03\x16\r\x13\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\
    \x16\x14\x20\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x16#%\n\n\n\x02\x04\
    \x02\x12\x04\x19\0\x1d\x01\n\n\n\x03\x04\x02\x01\x12\x03\x19\x08\r\n\x0b\
    \n\x04\x04\x02\x02\0\x12\x03\x1a\x04\x1d\n\x0c\n\x05\x04\x02\x02\0\x04\
    \x12\x03\x1a\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1a\r\x13\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1a\x14\x18\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03\x1a\x1b\x1c\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1b\x04\
    \x1f\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x1b\x04\x0c\n\x0c\n\x05\x04\
    \x02\x02\x01\x06\x12\x03\x1b\r\x15\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03\x1b\x16\x1a\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1b\x1d\x1e\n\
    \x0b\n\x04\x04\x02\x02\x02\x12\x03\x1c\x04\x1f\n\x0c\n\x05\x04\x02\x02\
    \x02\x04\x12\x03\x1c\x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1c\
    \r\x11\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1c\x12\x1a\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03\x1c\x1d\x1e\n\n\n\x02\x04\x03\x12\x04\x1f\0\
    !\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1f\x08\x11\n\x0b\n\x04\x04\x03\x02\
    \0\x12\x03\x20\x04\x1d\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x20\x04\x0c\
    \n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x20\r\x12\n\x0c\n\x05\x04\x03\x02\
    \0\x01\x12\x03\x20\x13\x18\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x20\x1b\
    \x1c\n\n\n\x02\x04\x04\x12\x04#\0)\x01\n\n\n\x03\x04\x04\x01\x12\x03#\
    \x08\x10\n\x0b\n\x04\x04\x04\x02\0\x12\x03$\x04#\n\x0c\n\x05\x04\x04\x02\
    \0\x04\x12\x03$\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03$\r\x15\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03$\x16\x1e\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03$!\"\n\x0b\n\x04\x04\x04\x02\x01\x12\x03%\x04$\n\x0c\n\x05\
    \x04\x04\x02\x01\x04\x12\x03%\x04\x0c\n\x0c\n\x05\x04\x04\x02\x01\x06\
    \x12\x03%\r\x15\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03%\x16\x1f\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x03%\"#\n\x0b\n\x04\x04\x04\x02\x02\x12\x03\
    &\x04'\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03&\x04\x0c\n\x0c\n\x05\x04\
    \x04\x02\x02\x06\x12\x03&\r\x18\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03&\
    \x19!\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03&$&\n\x0b\n\x04\x04\x04\x02\
    \x03\x12\x03'\x04+\n\x0c\n\x05\x04\x04\x02\x03\x04\x12\x03'\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\x03\x06\x12\x03'\r\x18\n\x0c\n\x05\x04\x04\x02\
    \x03\x01\x12\x03'\x19%\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03'(*\n\x0b\
    \n\x04\x04\x04\x02\x04\x12\x03(\x04'\n\x0c\n\x05\x04\x04\x02\x04\x04\x12\
    \x03(\x04\x0c\n\x0c\n\x05\x04\x04\x02\x04\x06\x12\x03(\r\x16\n\x0c\n\x05\
    \x04\x04\x02\x04\x01\x12\x03(\x17!\n\x0c\n\x05\x04\x04\x02\x04\x03\x12\
    \x03($&\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
