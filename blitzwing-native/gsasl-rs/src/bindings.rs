/* automatically generated by rust-bindgen */

pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type size_t = __darwin_size_t;
pub type ssize_t = __darwin_ssize_t;
pub const Gsasl_rc_GSASL_OK: Gsasl_rc = 0;
pub const Gsasl_rc_GSASL_NEEDS_MORE: Gsasl_rc = 1;
pub const Gsasl_rc_GSASL_UNKNOWN_MECHANISM: Gsasl_rc = 2;
pub const Gsasl_rc_GSASL_MECHANISM_CALLED_TOO_MANY_TIMES: Gsasl_rc = 3;
pub const Gsasl_rc_GSASL_MALLOC_ERROR: Gsasl_rc = 7;
pub const Gsasl_rc_GSASL_BASE64_ERROR: Gsasl_rc = 8;
pub const Gsasl_rc_GSASL_CRYPTO_ERROR: Gsasl_rc = 9;
pub const Gsasl_rc_GSASL_SASLPREP_ERROR: Gsasl_rc = 29;
pub const Gsasl_rc_GSASL_MECHANISM_PARSE_ERROR: Gsasl_rc = 30;
pub const Gsasl_rc_GSASL_AUTHENTICATION_ERROR: Gsasl_rc = 31;
pub const Gsasl_rc_GSASL_INTEGRITY_ERROR: Gsasl_rc = 33;
pub const Gsasl_rc_GSASL_NO_CLIENT_CODE: Gsasl_rc = 35;
pub const Gsasl_rc_GSASL_NO_SERVER_CODE: Gsasl_rc = 36;
pub const Gsasl_rc_GSASL_NO_CALLBACK: Gsasl_rc = 51;
pub const Gsasl_rc_GSASL_NO_ANONYMOUS_TOKEN: Gsasl_rc = 52;
pub const Gsasl_rc_GSASL_NO_AUTHID: Gsasl_rc = 53;
pub const Gsasl_rc_GSASL_NO_AUTHZID: Gsasl_rc = 54;
pub const Gsasl_rc_GSASL_NO_PASSWORD: Gsasl_rc = 55;
pub const Gsasl_rc_GSASL_NO_PASSCODE: Gsasl_rc = 56;
pub const Gsasl_rc_GSASL_NO_PIN: Gsasl_rc = 57;
pub const Gsasl_rc_GSASL_NO_SERVICE: Gsasl_rc = 58;
pub const Gsasl_rc_GSASL_NO_HOSTNAME: Gsasl_rc = 59;
pub const Gsasl_rc_GSASL_NO_CB_TLS_UNIQUE: Gsasl_rc = 65;
pub const Gsasl_rc_GSASL_NO_SAML20_IDP_IDENTIFIER: Gsasl_rc = 66;
pub const Gsasl_rc_GSASL_NO_SAML20_REDIRECT_URL: Gsasl_rc = 67;
pub const Gsasl_rc_GSASL_NO_OPENID20_REDIRECT_URL: Gsasl_rc = 68;
pub const Gsasl_rc_GSASL_GSSAPI_RELEASE_BUFFER_ERROR: Gsasl_rc = 37;
pub const Gsasl_rc_GSASL_GSSAPI_IMPORT_NAME_ERROR: Gsasl_rc = 38;
pub const Gsasl_rc_GSASL_GSSAPI_INIT_SEC_CONTEXT_ERROR: Gsasl_rc = 39;
pub const Gsasl_rc_GSASL_GSSAPI_ACCEPT_SEC_CONTEXT_ERROR: Gsasl_rc = 40;
pub const Gsasl_rc_GSASL_GSSAPI_UNWRAP_ERROR: Gsasl_rc = 41;
pub const Gsasl_rc_GSASL_GSSAPI_WRAP_ERROR: Gsasl_rc = 42;
pub const Gsasl_rc_GSASL_GSSAPI_ACQUIRE_CRED_ERROR: Gsasl_rc = 43;
pub const Gsasl_rc_GSASL_GSSAPI_DISPLAY_NAME_ERROR: Gsasl_rc = 44;
pub const Gsasl_rc_GSASL_GSSAPI_UNSUPPORTED_PROTECTION_ERROR: Gsasl_rc = 45;
pub const Gsasl_rc_GSASL_KERBEROS_V5_INIT_ERROR: Gsasl_rc = 46;
pub const Gsasl_rc_GSASL_KERBEROS_V5_INTERNAL_ERROR: Gsasl_rc = 47;
pub const Gsasl_rc_GSASL_SHISHI_ERROR: Gsasl_rc = 47;
pub const Gsasl_rc_GSASL_SECURID_SERVER_NEED_ADDITIONAL_PASSCODE: Gsasl_rc = 48;
pub const Gsasl_rc_GSASL_SECURID_SERVER_NEED_NEW_PIN: Gsasl_rc = 49;
pub const Gsasl_rc_GSASL_GSSAPI_ENCAPSULATE_TOKEN_ERROR: Gsasl_rc = 60;
pub const Gsasl_rc_GSASL_GSSAPI_DECAPSULATE_TOKEN_ERROR: Gsasl_rc = 61;
pub const Gsasl_rc_GSASL_GSSAPI_INQUIRE_MECH_FOR_SASLNAME_ERROR: Gsasl_rc = 62;
pub const Gsasl_rc_GSASL_GSSAPI_TEST_OID_SET_MEMBER_ERROR: Gsasl_rc = 63;
pub const Gsasl_rc_GSASL_GSSAPI_RELEASE_OID_SET_ERROR: Gsasl_rc = 64;
pub type Gsasl_rc = u32;
pub const Gsasl_qop_GSASL_QOP_AUTH: Gsasl_qop = 1;
pub const Gsasl_qop_GSASL_QOP_AUTH_INT: Gsasl_qop = 2;
pub const Gsasl_qop_GSASL_QOP_AUTH_CONF: Gsasl_qop = 4;
pub type Gsasl_qop = u32;
pub const Gsasl_cipher_GSASL_CIPHER_DES: Gsasl_cipher = 1;
pub const Gsasl_cipher_GSASL_CIPHER_3DES: Gsasl_cipher = 2;
pub const Gsasl_cipher_GSASL_CIPHER_RC4: Gsasl_cipher = 4;
pub const Gsasl_cipher_GSASL_CIPHER_RC4_40: Gsasl_cipher = 8;
pub const Gsasl_cipher_GSASL_CIPHER_RC4_56: Gsasl_cipher = 16;
pub const Gsasl_cipher_GSASL_CIPHER_AES: Gsasl_cipher = 32;
pub type Gsasl_cipher = u32;
pub const Gsasl_saslprep_flags_GSASL_ALLOW_UNASSIGNED: Gsasl_saslprep_flags = 1;
pub type Gsasl_saslprep_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gsasl {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gsasl_session {
  _unused: [u8; 0],
}
pub const Gsasl_property_GSASL_AUTHID: Gsasl_property = 1;
pub const Gsasl_property_GSASL_AUTHZID: Gsasl_property = 2;
pub const Gsasl_property_GSASL_PASSWORD: Gsasl_property = 3;
pub const Gsasl_property_GSASL_ANONYMOUS_TOKEN: Gsasl_property = 4;
pub const Gsasl_property_GSASL_SERVICE: Gsasl_property = 5;
pub const Gsasl_property_GSASL_HOSTNAME: Gsasl_property = 6;
pub const Gsasl_property_GSASL_GSSAPI_DISPLAY_NAME: Gsasl_property = 7;
pub const Gsasl_property_GSASL_PASSCODE: Gsasl_property = 8;
pub const Gsasl_property_GSASL_SUGGESTED_PIN: Gsasl_property = 9;
pub const Gsasl_property_GSASL_PIN: Gsasl_property = 10;
pub const Gsasl_property_GSASL_REALM: Gsasl_property = 11;
pub const Gsasl_property_GSASL_DIGEST_MD5_HASHED_PASSWORD: Gsasl_property = 12;
pub const Gsasl_property_GSASL_QOPS: Gsasl_property = 13;
pub const Gsasl_property_GSASL_QOP: Gsasl_property = 14;
pub const Gsasl_property_GSASL_SCRAM_ITER: Gsasl_property = 15;
pub const Gsasl_property_GSASL_SCRAM_SALT: Gsasl_property = 16;
pub const Gsasl_property_GSASL_SCRAM_SALTED_PASSWORD: Gsasl_property = 17;
pub const Gsasl_property_GSASL_CB_TLS_UNIQUE: Gsasl_property = 18;
pub const Gsasl_property_GSASL_SAML20_IDP_IDENTIFIER: Gsasl_property = 19;
pub const Gsasl_property_GSASL_SAML20_REDIRECT_URL: Gsasl_property = 20;
pub const Gsasl_property_GSASL_OPENID20_REDIRECT_URL: Gsasl_property = 21;
pub const Gsasl_property_GSASL_OPENID20_OUTCOME_DATA: Gsasl_property = 22;
pub const Gsasl_property_GSASL_SAML20_AUTHENTICATE_IN_BROWSER: Gsasl_property = 250;
pub const Gsasl_property_GSASL_OPENID20_AUTHENTICATE_IN_BROWSER: Gsasl_property = 251;
pub const Gsasl_property_GSASL_VALIDATE_SIMPLE: Gsasl_property = 500;
pub const Gsasl_property_GSASL_VALIDATE_EXTERNAL: Gsasl_property = 501;
pub const Gsasl_property_GSASL_VALIDATE_ANONYMOUS: Gsasl_property = 502;
pub const Gsasl_property_GSASL_VALIDATE_GSSAPI: Gsasl_property = 503;
pub const Gsasl_property_GSASL_VALIDATE_SECURID: Gsasl_property = 504;
pub const Gsasl_property_GSASL_VALIDATE_SAML20: Gsasl_property = 505;
pub const Gsasl_property_GSASL_VALIDATE_OPENID20: Gsasl_property = 506;
pub type Gsasl_property = u32;
pub type Gsasl_callback_function = ::std::option::Option<
  unsafe extern "C" fn(
    ctx: *mut Gsasl,
    sctx: *mut Gsasl_session,
    prop: Gsasl_property,
  ) -> ::std::os::raw::c_int,
>;
extern "C" {
  pub fn gsasl_init(ctx: *mut *mut Gsasl) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_done(ctx: *mut Gsasl);
}
extern "C" {
  pub fn gsasl_check_version(
    req_version: *const ::std::os::raw::c_char,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_callback_set(ctx: *mut Gsasl, cb: Gsasl_callback_function);
}
extern "C" {
  pub fn gsasl_callback(
    ctx: *mut Gsasl,
    sctx: *mut Gsasl_session,
    prop: Gsasl_property,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_callback_hook_set(ctx: *mut Gsasl, hook: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn gsasl_callback_hook_get(ctx: *mut Gsasl) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gsasl_session_hook_set(sctx: *mut Gsasl_session, hook: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn gsasl_session_hook_get(sctx: *mut Gsasl_session) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gsasl_property_set(
    sctx: *mut Gsasl_session,
    prop: Gsasl_property,
    data: *const ::std::os::raw::c_char,
  );
}
extern "C" {
  pub fn gsasl_property_set_raw(
    sctx: *mut Gsasl_session,
    prop: Gsasl_property,
    data: *const ::std::os::raw::c_char,
    len: size_t,
  );
}
extern "C" {
  pub fn gsasl_property_get(
    sctx: *mut Gsasl_session,
    prop: Gsasl_property,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_property_fast(
    sctx: *mut Gsasl_session,
    prop: Gsasl_property,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_client_mechlist(
    ctx: *mut Gsasl,
    out: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_client_support_p(
    ctx: *mut Gsasl,
    name: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_client_suggest_mechanism(
    ctx: *mut Gsasl,
    mechlist: *const ::std::os::raw::c_char,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_server_mechlist(
    ctx: *mut Gsasl,
    out: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_server_support_p(
    ctx: *mut Gsasl,
    name: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_client_start(
    ctx: *mut Gsasl,
    mech: *const ::std::os::raw::c_char,
    sctx: *mut *mut Gsasl_session,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_server_start(
    ctx: *mut Gsasl,
    mech: *const ::std::os::raw::c_char,
    sctx: *mut *mut Gsasl_session,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_step(
    sctx: *mut Gsasl_session,
    input: *const ::std::os::raw::c_char,
    input_len: size_t,
    output: *mut *mut ::std::os::raw::c_char,
    output_len: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_step64(
    sctx: *mut Gsasl_session,
    b64input: *const ::std::os::raw::c_char,
    b64output: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_finish(sctx: *mut Gsasl_session);
}
extern "C" {
  pub fn gsasl_encode(
    sctx: *mut Gsasl_session,
    input: *const ::std::os::raw::c_char,
    input_len: size_t,
    output: *mut *mut ::std::os::raw::c_char,
    output_len: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_decode(
    sctx: *mut Gsasl_session,
    input: *const ::std::os::raw::c_char,
    input_len: size_t,
    output: *mut *mut ::std::os::raw::c_char,
    output_len: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_mechanism_name(sctx: *mut Gsasl_session) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_strerror(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_strerror_name(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_saslprep(
    in_: *const ::std::os::raw::c_char,
    flags: Gsasl_saslprep_flags,
    out: *mut *mut ::std::os::raw::c_char,
    stringpreprc: *mut ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_simple_getpass(
    filename: *const ::std::os::raw::c_char,
    username: *const ::std::os::raw::c_char,
    key: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_base64_to(
    in_: *const ::std::os::raw::c_char,
    inlen: size_t,
    out: *mut *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_base64_from(
    in_: *const ::std::os::raw::c_char,
    inlen: size_t,
    out: *mut *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_nonce(data: *mut ::std::os::raw::c_char, datalen: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_random(data: *mut ::std::os::raw::c_char, datalen: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_md5(
    in_: *const ::std::os::raw::c_char,
    inlen: size_t,
    out: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_hmac_md5(
    key: *const ::std::os::raw::c_char,
    keylen: size_t,
    in_: *const ::std::os::raw::c_char,
    inlen: size_t,
    outhash: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_sha1(
    in_: *const ::std::os::raw::c_char,
    inlen: size_t,
    out: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_hmac_sha1(
    key: *const ::std::os::raw::c_char,
    keylen: size_t,
    in_: *const ::std::os::raw::c_char,
    inlen: size_t,
    outhash: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_free(ptr: *mut ::std::os::raw::c_void);
}
pub type Gsasl_init_function =
  ::std::option::Option<unsafe extern "C" fn(ctx: *mut Gsasl) -> ::std::os::raw::c_int>;
pub type Gsasl_done_function = ::std::option::Option<unsafe extern "C" fn(ctx: *mut Gsasl)>;
pub type Gsasl_start_function = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    mech_data: *mut *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_step_function = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    mech_data: *mut ::std::os::raw::c_void,
    input: *const ::std::os::raw::c_char,
    input_len: size_t,
    output: *mut *mut ::std::os::raw::c_char,
    output_len: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_finish_function = ::std::option::Option<
  unsafe extern "C" fn(sctx: *mut Gsasl_session, mech_data: *mut ::std::os::raw::c_void),
>;
pub type Gsasl_code_function = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    mech_data: *mut ::std::os::raw::c_void,
    input: *const ::std::os::raw::c_char,
    input_len: size_t,
    output: *mut *mut ::std::os::raw::c_char,
    output_len: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gsasl_mechanism_functions {
  pub init: Gsasl_init_function,
  pub done: Gsasl_done_function,
  pub start: Gsasl_start_function,
  pub step: Gsasl_step_function,
  pub finish: Gsasl_finish_function,
  pub encode: Gsasl_code_function,
  pub decode: Gsasl_code_function,
}
#[test]
fn bindgen_test_layout_Gsasl_mechanism_functions() {
  assert_eq!(
    ::std::mem::size_of::<Gsasl_mechanism_functions>(),
    56usize,
    concat!("Size of: ", stringify!(Gsasl_mechanism_functions))
  );
  assert_eq!(
    ::std::mem::align_of::<Gsasl_mechanism_functions>(),
    8usize,
    concat!("Alignment of ", stringify!(Gsasl_mechanism_functions))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism_functions>())).init as *const _ as usize },
    0usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism_functions), "::", stringify!(init))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism_functions>())).done as *const _ as usize },
    8usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism_functions), "::", stringify!(done))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism_functions>())).start as *const _ as usize },
    16usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism_functions), "::", stringify!(start))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism_functions>())).step as *const _ as usize },
    24usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism_functions), "::", stringify!(step))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism_functions>())).finish as *const _ as usize },
    32usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism_functions), "::", stringify!(finish))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism_functions>())).encode as *const _ as usize },
    40usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism_functions), "::", stringify!(encode))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism_functions>())).decode as *const _ as usize },
    48usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism_functions), "::", stringify!(decode))
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gsasl_mechanism {
  pub name: *const ::std::os::raw::c_char,
  pub client: Gsasl_mechanism_functions,
  pub server: Gsasl_mechanism_functions,
}
#[test]
fn bindgen_test_layout_Gsasl_mechanism() {
  assert_eq!(
    ::std::mem::size_of::<Gsasl_mechanism>(),
    120usize,
    concat!("Size of: ", stringify!(Gsasl_mechanism))
  );
  assert_eq!(
    ::std::mem::align_of::<Gsasl_mechanism>(),
    8usize,
    concat!("Alignment of ", stringify!(Gsasl_mechanism))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism>())).name as *const _ as usize },
    0usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism), "::", stringify!(name))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism>())).client as *const _ as usize },
    8usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism), "::", stringify!(client))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Gsasl_mechanism>())).server as *const _ as usize },
    64usize,
    concat!("Offset of field: ", stringify!(Gsasl_mechanism), "::", stringify!(server))
  );
}
extern "C" {
  pub fn gsasl_register(ctx: *mut Gsasl, mech: *const Gsasl_mechanism) -> ::std::os::raw::c_int;
}
pub type Gsasl_ctx = Gsasl;
pub type Gsasl_session_ctx = Gsasl_session;
extern "C" {
  pub fn gsasl_client_listmech(
    ctx: *mut Gsasl,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_server_listmech(
    ctx: *mut Gsasl,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_client_step(
    sctx: *mut Gsasl_session,
    input: *const ::std::os::raw::c_char,
    input_len: size_t,
    output: *mut ::std::os::raw::c_char,
    output_len: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_client_step_base64(
    sctx: *mut Gsasl_session,
    b64input: *const ::std::os::raw::c_char,
    b64output: *mut ::std::os::raw::c_char,
    b64output_len: size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_server_step(
    sctx: *mut Gsasl_session,
    input: *const ::std::os::raw::c_char,
    input_len: size_t,
    output: *mut ::std::os::raw::c_char,
    output_len: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_server_step_base64(
    sctx: *mut Gsasl_session,
    b64input: *const ::std::os::raw::c_char,
    b64output: *mut ::std::os::raw::c_char,
    b64output_len: size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_client_finish(sctx: *mut Gsasl_session);
}
extern "C" {
  pub fn gsasl_server_finish(sctx: *mut Gsasl_session);
}
extern "C" {
  pub fn gsasl_client_ctx_get(sctx: *mut Gsasl_session) -> *mut Gsasl;
}
extern "C" {
  pub fn gsasl_server_ctx_get(sctx: *mut Gsasl_session) -> *mut Gsasl;
}
extern "C" {
  pub fn gsasl_client_application_data_set(
    sctx: *mut Gsasl_session,
    application_data: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn gsasl_client_application_data_get(sctx: *mut Gsasl_session)
    -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gsasl_server_application_data_set(
    sctx: *mut Gsasl_session,
    application_data: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn gsasl_server_application_data_get(sctx: *mut Gsasl_session)
    -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gsasl_randomize(
    strong: ::std::os::raw::c_int,
    data: *mut ::std::os::raw::c_char,
    datalen: size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_ctx_get(sctx: *mut Gsasl_session) -> *mut Gsasl;
}
extern "C" {
  pub fn gsasl_encode_inline(
    sctx: *mut Gsasl_session,
    input: *const ::std::os::raw::c_char,
    input_len: size_t,
    output: *mut ::std::os::raw::c_char,
    output_len: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_decode_inline(
    sctx: *mut Gsasl_session,
    input: *const ::std::os::raw::c_char,
    input_len: size_t,
    output: *mut ::std::os::raw::c_char,
    output_len: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_application_data_set(ctx: *mut Gsasl, appdata: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn gsasl_application_data_get(ctx: *mut Gsasl) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gsasl_appinfo_set(sctx: *mut Gsasl_session, appdata: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn gsasl_appinfo_get(sctx: *mut Gsasl_session) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gsasl_server_suggest_mechanism(
    ctx: *mut Gsasl,
    mechlist: *const ::std::os::raw::c_char,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_base64_encode(
    src: *const ::std::os::raw::c_char,
    srclength: size_t,
    target: *mut ::std::os::raw::c_char,
    targsize: size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_base64_decode(
    src: *const ::std::os::raw::c_char,
    target: *mut ::std::os::raw::c_char,
    targsize: size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gsasl_stringprep_nfkc(
    in_: *const ::std::os::raw::c_char,
    len: ssize_t,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_stringprep_saslprep(
    in_: *const ::std::os::raw::c_char,
    stringprep_rc: *mut ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_stringprep_trace(
    in_: *const ::std::os::raw::c_char,
    stringprep_rc: *mut ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn gsasl_md5pwd_get_password(
    filename: *const ::std::os::raw::c_char,
    username: *const ::std::os::raw::c_char,
    key: *mut ::std::os::raw::c_char,
    keylen: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
pub type Gsasl_client_callback_anonymous = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_client_callback_authentication_id = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_client_callback_authorization_id = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_client_callback_password = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_client_callback_passcode = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_client_callback_pin = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    suggestion: *mut ::std::os::raw::c_char,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_client_callback_service = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    service: *mut ::std::os::raw::c_char,
    servicelen: *mut size_t,
    hostname: *mut ::std::os::raw::c_char,
    hostnamelen: *mut size_t,
    servicename: *mut ::std::os::raw::c_char,
    servicenamelen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_client_callback_qop = ::std::option::Option<
  unsafe extern "C" fn(sctx: *mut Gsasl_session, serverqops: Gsasl_qop) -> Gsasl_qop,
>;
pub type Gsasl_client_callback_maxbuf = ::std::option::Option<
  unsafe extern "C" fn(sctx: *mut Gsasl_session, servermaxbuf: size_t) -> size_t,
>;
pub type Gsasl_client_callback_realm = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_retrieve = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    authentication_id: *const ::std::os::raw::c_char,
    authorization_id: *const ::std::os::raw::c_char,
    realm: *const ::std::os::raw::c_char,
    key: *mut ::std::os::raw::c_char,
    keylen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_validate = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    authorization_id: *const ::std::os::raw::c_char,
    authentication_id: *const ::std::os::raw::c_char,
    password: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_gssapi = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    clientname: *const ::std::os::raw::c_char,
    authentication_id: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_securid = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    authentication_id: *const ::std::os::raw::c_char,
    authorization_id: *const ::std::os::raw::c_char,
    passcode: *const ::std::os::raw::c_char,
    pin: *mut ::std::os::raw::c_char,
    suggestpin: *mut ::std::os::raw::c_char,
    suggestpinlen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_cram_md5 = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    username: *mut ::std::os::raw::c_char,
    challenge: *mut ::std::os::raw::c_char,
    response: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_digest_md5 = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    username: *mut ::std::os::raw::c_char,
    realm: *mut ::std::os::raw::c_char,
    secrethash: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_service = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    service: *mut ::std::os::raw::c_char,
    servicelen: *mut size_t,
    hostname: *mut ::std::os::raw::c_char,
    hostnamelen: *mut size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_external =
  ::std::option::Option<unsafe extern "C" fn(sctx: *mut Gsasl_session) -> ::std::os::raw::c_int>;
pub type Gsasl_server_callback_anonymous = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    token: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_realm = ::std::option::Option<
  unsafe extern "C" fn(
    sctx: *mut Gsasl_session,
    out: *mut ::std::os::raw::c_char,
    outlen: *mut size_t,
    nth: size_t,
  ) -> ::std::os::raw::c_int,
>;
pub type Gsasl_server_callback_qop =
  ::std::option::Option<unsafe extern "C" fn(sctx: *mut Gsasl_session) -> Gsasl_qop>;
pub type Gsasl_server_callback_maxbuf =
  ::std::option::Option<unsafe extern "C" fn(sctx: *mut Gsasl_session) -> size_t>;
pub type Gsasl_server_callback_cipher =
  ::std::option::Option<unsafe extern "C" fn(sctx: *mut Gsasl_session) -> Gsasl_cipher>;
extern "C" {
  pub fn gsasl_client_callback_authorization_id_set(
    ctx: *mut Gsasl,
    cb: Gsasl_client_callback_authorization_id,
  );
}
extern "C" {
  pub fn gsasl_client_callback_authorization_id_get(
    ctx: *mut Gsasl,
  ) -> Gsasl_client_callback_authorization_id;
}
extern "C" {
  pub fn gsasl_client_callback_authentication_id_set(
    ctx: *mut Gsasl,
    cb: Gsasl_client_callback_authentication_id,
  );
}
extern "C" {
  pub fn gsasl_client_callback_authentication_id_get(
    ctx: *mut Gsasl,
  ) -> Gsasl_client_callback_authentication_id;
}
extern "C" {
  pub fn gsasl_client_callback_anonymous_set(ctx: *mut Gsasl, cb: Gsasl_client_callback_anonymous);
}
extern "C" {
  pub fn gsasl_client_callback_anonymous_get(ctx: *mut Gsasl) -> Gsasl_client_callback_anonymous;
}
extern "C" {
  pub fn gsasl_client_callback_password_set(ctx: *mut Gsasl, cb: Gsasl_client_callback_password);
}
extern "C" {
  pub fn gsasl_client_callback_password_get(ctx: *mut Gsasl) -> Gsasl_client_callback_password;
}
extern "C" {
  pub fn gsasl_client_callback_passcode_set(ctx: *mut Gsasl, cb: Gsasl_client_callback_passcode);
}
extern "C" {
  pub fn gsasl_client_callback_passcode_get(ctx: *mut Gsasl) -> Gsasl_client_callback_passcode;
}
extern "C" {
  pub fn gsasl_client_callback_pin_set(ctx: *mut Gsasl, cb: Gsasl_client_callback_pin);
}
extern "C" {
  pub fn gsasl_client_callback_pin_get(ctx: *mut Gsasl) -> Gsasl_client_callback_pin;
}
extern "C" {
  pub fn gsasl_client_callback_service_set(ctx: *mut Gsasl, cb: Gsasl_client_callback_service);
}
extern "C" {
  pub fn gsasl_client_callback_service_get(ctx: *mut Gsasl) -> Gsasl_client_callback_service;
}
extern "C" {
  pub fn gsasl_client_callback_qop_set(ctx: *mut Gsasl, cb: Gsasl_client_callback_qop);
}
extern "C" {
  pub fn gsasl_client_callback_qop_get(ctx: *mut Gsasl) -> Gsasl_client_callback_qop;
}
extern "C" {
  pub fn gsasl_client_callback_maxbuf_set(ctx: *mut Gsasl, cb: Gsasl_client_callback_maxbuf);
}
extern "C" {
  pub fn gsasl_client_callback_maxbuf_get(ctx: *mut Gsasl) -> Gsasl_client_callback_maxbuf;
}
extern "C" {
  pub fn gsasl_client_callback_realm_set(ctx: *mut Gsasl, cb: Gsasl_client_callback_realm);
}
extern "C" {
  pub fn gsasl_client_callback_realm_get(ctx: *mut Gsasl) -> Gsasl_client_callback_realm;
}
extern "C" {
  pub fn gsasl_server_callback_validate_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_validate);
}
extern "C" {
  pub fn gsasl_server_callback_validate_get(ctx: *mut Gsasl) -> Gsasl_server_callback_validate;
}
extern "C" {
  pub fn gsasl_server_callback_retrieve_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_retrieve);
}
extern "C" {
  pub fn gsasl_server_callback_retrieve_get(ctx: *mut Gsasl) -> Gsasl_server_callback_retrieve;
}
extern "C" {
  pub fn gsasl_server_callback_cram_md5_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_cram_md5);
}
extern "C" {
  pub fn gsasl_server_callback_cram_md5_get(ctx: *mut Gsasl) -> Gsasl_server_callback_cram_md5;
}
extern "C" {
  pub fn gsasl_server_callback_digest_md5_set(
    ctx: *mut Gsasl,
    cb: Gsasl_server_callback_digest_md5,
  );
}
extern "C" {
  pub fn gsasl_server_callback_digest_md5_get(ctx: *mut Gsasl) -> Gsasl_server_callback_digest_md5;
}
extern "C" {
  pub fn gsasl_server_callback_external_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_external);
}
extern "C" {
  pub fn gsasl_server_callback_external_get(ctx: *mut Gsasl) -> Gsasl_server_callback_external;
}
extern "C" {
  pub fn gsasl_server_callback_anonymous_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_anonymous);
}
extern "C" {
  pub fn gsasl_server_callback_anonymous_get(ctx: *mut Gsasl) -> Gsasl_server_callback_anonymous;
}
extern "C" {
  pub fn gsasl_server_callback_realm_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_realm);
}
extern "C" {
  pub fn gsasl_server_callback_realm_get(ctx: *mut Gsasl) -> Gsasl_server_callback_realm;
}
extern "C" {
  pub fn gsasl_server_callback_qop_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_qop);
}
extern "C" {
  pub fn gsasl_server_callback_qop_get(ctx: *mut Gsasl) -> Gsasl_server_callback_qop;
}
extern "C" {
  pub fn gsasl_server_callback_maxbuf_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_maxbuf);
}
extern "C" {
  pub fn gsasl_server_callback_maxbuf_get(ctx: *mut Gsasl) -> Gsasl_server_callback_maxbuf;
}
extern "C" {
  pub fn gsasl_server_callback_cipher_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_cipher);
}
extern "C" {
  pub fn gsasl_server_callback_cipher_get(ctx: *mut Gsasl) -> Gsasl_server_callback_cipher;
}
extern "C" {
  pub fn gsasl_server_callback_securid_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_securid);
}
extern "C" {
  pub fn gsasl_server_callback_securid_get(ctx: *mut Gsasl) -> Gsasl_server_callback_securid;
}
extern "C" {
  pub fn gsasl_server_callback_gssapi_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_gssapi);
}
extern "C" {
  pub fn gsasl_server_callback_gssapi_get(ctx: *mut Gsasl) -> Gsasl_server_callback_gssapi;
}
extern "C" {
  pub fn gsasl_server_callback_service_set(ctx: *mut Gsasl, cb: Gsasl_server_callback_service);
}
extern "C" {
  pub fn gsasl_server_callback_service_get(ctx: *mut Gsasl) -> Gsasl_server_callback_service;
}
