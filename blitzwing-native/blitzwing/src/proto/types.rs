// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `types.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct ExprTypeProto {
    // message fields
    basic_type: ::std::option::Option<BasicTypeProto>,
    nullable: ::std::option::Option<bool>,
    name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExprTypeProto {
    fn default() -> &'a ExprTypeProto {
        <ExprTypeProto as ::protobuf::Message>::default_instance()
    }
}

impl ExprTypeProto {
    pub fn new() -> ExprTypeProto {
        ::std::default::Default::default()
    }

    // required .BasicTypeProto basic_type = 1;


    pub fn get_basic_type(&self) -> BasicTypeProto {
        self.basic_type.unwrap_or(BasicTypeProto::NONE)
    }
    pub fn clear_basic_type(&mut self) {
        self.basic_type = ::std::option::Option::None;
    }

    pub fn has_basic_type(&self) -> bool {
        self.basic_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_basic_type(&mut self, v: BasicTypeProto) {
        self.basic_type = ::std::option::Option::Some(v);
    }

    // required bool nullable = 2;


    pub fn get_nullable(&self) -> bool {
        self.nullable.unwrap_or(false)
    }
    pub fn clear_nullable(&mut self) {
        self.nullable = ::std::option::Option::None;
    }

    pub fn has_nullable(&self) -> bool {
        self.nullable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nullable(&mut self, v: bool) {
        self.nullable = ::std::option::Option::Some(v);
    }

    // optional string name = 3;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for ExprTypeProto {
    fn is_initialized(&self) -> bool {
        if self.basic_type.is_none() {
            return false;
        }
        if self.nullable.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.basic_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.nullable = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.basic_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.nullable {
            my_size += 2;
        }
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.basic_type {
            os.write_enum(1, v.value())?;
        }
        if let Some(v) = self.nullable {
            os.write_bool(2, v)?;
        }
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExprTypeProto {
        ExprTypeProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BasicTypeProto>>(
                    "basic_type",
                    |m: &ExprTypeProto| { &m.basic_type },
                    |m: &mut ExprTypeProto| { &mut m.basic_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "nullable",
                    |m: &ExprTypeProto| { &m.nullable },
                    |m: &mut ExprTypeProto| { &mut m.nullable },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ExprTypeProto| { &m.name },
                    |m: &mut ExprTypeProto| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExprTypeProto>(
                    "ExprTypeProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExprTypeProto {
        static mut instance: ::protobuf::lazy::Lazy<ExprTypeProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExprTypeProto,
        };
        unsafe {
            instance.get(ExprTypeProto::new)
        }
    }
}

impl ::protobuf::Clear for ExprTypeProto {
    fn clear(&mut self) {
        self.basic_type = ::std::option::Option::None;
        self.nullable = ::std::option::Option::None;
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExprTypeProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExprTypeProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SchemaProto {
    // message fields
    fields: ::protobuf::RepeatedField<ExprTypeProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SchemaProto {
    fn default() -> &'a SchemaProto {
        <SchemaProto as ::protobuf::Message>::default_instance()
    }
}

impl SchemaProto {
    pub fn new() -> SchemaProto {
        ::std::default::Default::default()
    }

    // repeated .ExprTypeProto fields = 1;


    pub fn get_fields(&self) -> &[ExprTypeProto] {
        &self.fields
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::protobuf::RepeatedField<ExprTypeProto>) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fields(&mut self) -> &mut ::protobuf::RepeatedField<ExprTypeProto> {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::protobuf::RepeatedField<ExprTypeProto> {
        ::std::mem::replace(&mut self.fields, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SchemaProto {
    fn is_initialized(&self) -> bool {
        for v in &self.fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fields {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SchemaProto {
        SchemaProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExprTypeProto>>(
                    "fields",
                    |m: &SchemaProto| { &m.fields },
                    |m: &mut SchemaProto| { &mut m.fields },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SchemaProto>(
                    "SchemaProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SchemaProto {
        static mut instance: ::protobuf::lazy::Lazy<SchemaProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SchemaProto,
        };
        unsafe {
            instance.get(SchemaProto::new)
        }
    }
}

impl ::protobuf::Clear for SchemaProto {
    fn clear(&mut self) {
        self.fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchemaProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchemaProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BasicTypeProto {
    NONE = 0,
    BOOL = 1,
    UINT8 = 2,
    INT8 = 3,
    UINT16 = 4,
    INT16 = 5,
    UINT32 = 6,
    INT32 = 7,
    UINT64 = 8,
    INT64 = 9,
    HALF_FLOAT = 10,
    FLOAT = 11,
    DOUBLE = 12,
    UTF8 = 13,
    BINARY = 14,
    FIXED_SIZE_BINARY = 15,
    DATE32 = 16,
    DATE64 = 17,
    TIMESTAMP = 18,
    TIME32 = 19,
    TIME64 = 20,
    INTERVAL = 21,
    DECIMAL = 22,
    LIST = 23,
    STRUCT = 24,
    UNION = 25,
    DICTIONARY = 26,
    MAP = 27,
}

impl ::protobuf::ProtobufEnum for BasicTypeProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BasicTypeProto> {
        match value {
            0 => ::std::option::Option::Some(BasicTypeProto::NONE),
            1 => ::std::option::Option::Some(BasicTypeProto::BOOL),
            2 => ::std::option::Option::Some(BasicTypeProto::UINT8),
            3 => ::std::option::Option::Some(BasicTypeProto::INT8),
            4 => ::std::option::Option::Some(BasicTypeProto::UINT16),
            5 => ::std::option::Option::Some(BasicTypeProto::INT16),
            6 => ::std::option::Option::Some(BasicTypeProto::UINT32),
            7 => ::std::option::Option::Some(BasicTypeProto::INT32),
            8 => ::std::option::Option::Some(BasicTypeProto::UINT64),
            9 => ::std::option::Option::Some(BasicTypeProto::INT64),
            10 => ::std::option::Option::Some(BasicTypeProto::HALF_FLOAT),
            11 => ::std::option::Option::Some(BasicTypeProto::FLOAT),
            12 => ::std::option::Option::Some(BasicTypeProto::DOUBLE),
            13 => ::std::option::Option::Some(BasicTypeProto::UTF8),
            14 => ::std::option::Option::Some(BasicTypeProto::BINARY),
            15 => ::std::option::Option::Some(BasicTypeProto::FIXED_SIZE_BINARY),
            16 => ::std::option::Option::Some(BasicTypeProto::DATE32),
            17 => ::std::option::Option::Some(BasicTypeProto::DATE64),
            18 => ::std::option::Option::Some(BasicTypeProto::TIMESTAMP),
            19 => ::std::option::Option::Some(BasicTypeProto::TIME32),
            20 => ::std::option::Option::Some(BasicTypeProto::TIME64),
            21 => ::std::option::Option::Some(BasicTypeProto::INTERVAL),
            22 => ::std::option::Option::Some(BasicTypeProto::DECIMAL),
            23 => ::std::option::Option::Some(BasicTypeProto::LIST),
            24 => ::std::option::Option::Some(BasicTypeProto::STRUCT),
            25 => ::std::option::Option::Some(BasicTypeProto::UNION),
            26 => ::std::option::Option::Some(BasicTypeProto::DICTIONARY),
            27 => ::std::option::Option::Some(BasicTypeProto::MAP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BasicTypeProto] = &[
            BasicTypeProto::NONE,
            BasicTypeProto::BOOL,
            BasicTypeProto::UINT8,
            BasicTypeProto::INT8,
            BasicTypeProto::UINT16,
            BasicTypeProto::INT16,
            BasicTypeProto::UINT32,
            BasicTypeProto::INT32,
            BasicTypeProto::UINT64,
            BasicTypeProto::INT64,
            BasicTypeProto::HALF_FLOAT,
            BasicTypeProto::FLOAT,
            BasicTypeProto::DOUBLE,
            BasicTypeProto::UTF8,
            BasicTypeProto::BINARY,
            BasicTypeProto::FIXED_SIZE_BINARY,
            BasicTypeProto::DATE32,
            BasicTypeProto::DATE64,
            BasicTypeProto::TIMESTAMP,
            BasicTypeProto::TIME32,
            BasicTypeProto::TIME64,
            BasicTypeProto::INTERVAL,
            BasicTypeProto::DECIMAL,
            BasicTypeProto::LIST,
            BasicTypeProto::STRUCT,
            BasicTypeProto::UNION,
            BasicTypeProto::DICTIONARY,
            BasicTypeProto::MAP,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("BasicTypeProto", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for BasicTypeProto {
}

impl ::std::default::Default for BasicTypeProto {
    fn default() -> Self {
        BasicTypeProto::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for BasicTypeProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0btypes.proto\"T\n\rExprTypeProto\x12#\n\nbasic_type\x18\x01\x20\x02\
    (\x0e2\x0f.BasicTypeProto\x12\x10\n\x08nullable\x18\x02\x20\x02(\x08\x12\
    \x0c\n\x04name\x18\x03\x20\x01(\t\"-\n\x0bSchemaProto\x12\x1e\n\x06field\
    s\x18\x01\x20\x03(\x0b2\x0e.ExprTypeProto*\xe6\x02\n\x0eBasicTypeProto\
    \x12\x08\n\x04NONE\x10\0\x12\x08\n\x04BOOL\x10\x01\x12\t\n\x05UINT8\x10\
    \x02\x12\x08\n\x04INT8\x10\x03\x12\n\n\x06UINT16\x10\x04\x12\t\n\x05INT1\
    6\x10\x05\x12\n\n\x06UINT32\x10\x06\x12\t\n\x05INT32\x10\x07\x12\n\n\x06\
    UINT64\x10\x08\x12\t\n\x05INT64\x10\t\x12\x0e\n\nHALF_FLOAT\x10\n\x12\t\
    \n\x05FLOAT\x10\x0b\x12\n\n\x06DOUBLE\x10\x0c\x12\x08\n\x04UTF8\x10\r\
    \x12\n\n\x06BINARY\x10\x0e\x12\x15\n\x11FIXED_SIZE_BINARY\x10\x0f\x12\n\
    \n\x06DATE32\x10\x10\x12\n\n\x06DATE64\x10\x11\x12\r\n\tTIMESTAMP\x10\
    \x12\x12\n\n\x06TIME32\x10\x13\x12\n\n\x06TIME64\x10\x14\x12\x0c\n\x08IN\
    TERVAL\x10\x15\x12\x0b\n\x07DECIMAL\x10\x16\x12\x08\n\x04LIST\x10\x17\
    \x12\n\n\x06STRUCT\x10\x18\x12\t\n\x05UNION\x10\x19\x12\x0e\n\nDICTIONAR\
    Y\x10\x1a\x12\x07\n\x03MAP\x10\x1bBE\n7com.ebay.hadoop.blitzwing.generat\
    ed.executor.plan.typesB\nTypesProto\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
